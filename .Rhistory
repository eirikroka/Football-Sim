summarise(
initial_sum_europa = sum(E),
additional_teams_needed = 32 - initial_sum_europa
) %>%
pull(additional_teams_needed)
# Combine eg_2 and eg_1 and randomly select the necessary number of unique teams from them
all_groups <- c(eg_2, eg_1)
selected_teams <- sample(all_groups, size = additional_teams_needed,
replace = FALSE)
# Update the Europa value for the selected teams
club_data <- club_data %>%
mutate(Europa =
ifelse(Group %in% selected_teams, Europa + 1, Europa)
)
# UL ------------------------------
# Max 7 teams per group
groups_to_remove <- club_data %>%
group_by(Group) %>%
summarise(mean_Europa = mean(Europa),
mean_Pass = mean(Pass)) %>%
filter(mean_Europa + mean_Pass == 7) %>%
pull(Group)
ulg_1 <- unique(club_data$Group)
ulg_1 <- setdiff(ulg_1, groups_to_remove)
possible_bonus <- c(
"NED", "POR", "BEL", "TUR", "CZE",
"GRE", "SCO", "RUS", "DEN", "NOR", "SRB", "AUT", "ROM", "ISR", "POL",
"UKR", "CRO", "SUI", "SWE", "HUN", "BUL", "SVN", "REST"
)
# Extra teams to join the Conference league
random_bonus <- sample(possible_bonus, size = 32 - length(ulg_1), replace = FALSE)
club_data <- club_data %>%
mutate(UL = case_when(
Group %in% ulg_1 ~ 1,
TRUE ~ 0
))
club_data <- club_data %>%
mutate(UL =
ifelse(Group %in% random_bonus, UL + 1, UL)
)
club_data %>%
group_by(Group) %>%
summarise(
P = mean(Pass),
E = mean(Europa),
UL = mean(UL),
) %>%
mutate(s = E + P + UL) %>%
arrange(desc(s))
library(tidyverse)
club_data <- read.csv("data/data1.csv") %>%
select(Club, Country, Elo, Level) %>%
filter(Level == 1 | Level == 0) %>%
mutate(Group = Country) %>%
select(-Country, -Level) %>%
group_by(Group) %>%
mutate(count = n()) %>%
filter(count > 4) %>%
ungroup() %>%
select(-count)
rest <- read.csv("data/data1.csv") %>%
select(Club, Country, Elo, Level) %>%
filter(Level == 1 | Level == 0) %>%
mutate(Group = Country) %>%
select(-Country, -Level) %>%
group_by(Group) %>%
mutate(count = n()) %>%
filter(count <= 4) %>%
ungroup() %>%
select(-count) %>%
filter( Elo > 1200) %>%
sample_n(., size = 20, replace = FALSE) %>%
mutate(Group = "REST")
club_data <- club_data %>%
full_join(rest)
# Pass ------------------------------
# Define the groups and their Pass values
g_4 <-  c("ENG", "GER", "ESP", "ITA")
g_3 <- "FRA"
g_2 <- c("POR","NED","BEL")
# Find the groups that haven't gotten any values
remaining_groups_pass <- setdiff(unique(club_data$Group), c(g_4, g_3, g_2))
# Randomly select 7 groups from them for Pass
random_groups_pass <- sample(remaining_groups_pass, size = 7)
# Update the Pass values in club_data
club_data <- club_data %>%
mutate(Pass = case_when(
Group %in% g_4 ~ 4,
Group == g_3 ~ 3,
Group %in% g_2 ~ 2,
Group %in% random_groups_pass ~ 1,  # assign 1 to the randomly selected groups
TRUE ~ 0
))
# Europa league ------------------------------
eg_2 <-  c("ENG", "GER", "ESP", "ITA", "FRA")
eg_1 <- c("POR", "NED", "BEL", "RUS", "CZE", "TUR",
"GRE", "AUT", "NOR")
# Find the groups that haven't gotten any values
remaining_groups_europa <- setdiff(unique(club_data$Group), c(eg_2, eg_1))
# Randomly select 5 groups from them for Europa (excluding the ones already in random_groups_pass)
random_groups_europa <- sample(setdiff(remaining_groups_europa, random_groups_pass), size = 5)
# Combine the random groups from Pass with the new random groups for Europa
combined_random_groups <- union(random_groups_pass, random_groups_europa)
# Update the Europa values in club_data
club_data <- club_data %>%
mutate(Europa = case_when(
Group %in% eg_2 ~ 2,
Group %in% eg_1 ~ 1,
Group %in% combined_random_groups ~ 1,  # assign 1 to the combined random groups
TRUE ~ 0
))
# Summarize to calculate the initial sum of Europa values
additional_teams_needed <- club_data %>%
group_by(Group) %>%
summarise(E = mean(Europa)) %>%
summarise(
initial_sum_europa = sum(E),
additional_teams_needed = 32 - initial_sum_europa
) %>%
pull(additional_teams_needed)
# Combine eg_2 and eg_1 and randomly select the necessary number of unique teams from them
all_groups <- c(eg_2, eg_1)
selected_teams <- sample(all_groups, size = additional_teams_needed,
replace = FALSE)
# Update the Europa value for the selected teams
club_data <- club_data %>%
mutate(Europa =
ifelse(Group %in% selected_teams, Europa + 1, Europa)
)
# UL ------------------------------
# Max 7 teams per group
groups_to_remove <- club_data %>%
group_by(Group) %>%
summarise(mean_Europa = mean(Europa),
mean_Pass = mean(Pass)) %>%
filter(mean_Europa + mean_Pass == 7) %>%
pull(Group)
ulg_1 <- unique(club_data$Group)
ulg_1 <- setdiff(ulg_1, groups_to_remove)
possible_bonus <- c(
"NED", "POR", "BEL", "TUR", "CZE",
"GRE", "SCO", "RUS", "DEN", "NOR", "SRB", "AUT", "ROM", "ISR", "POL",
"UKR", "CRO", "SUI", "SWE", "HUN", "BUL", "SVN", "REST"
)
# Extra teams to join the Conference league
random_bonus <- sample(possible_bonus, size = 32 - length(ulg_1), replace = FALSE)
club_data <- club_data %>%
mutate(UL = case_when(
Group %in% ulg_1 ~ 1,
TRUE ~ 0
))
club_data <- club_data %>%
mutate(UL =
ifelse(Group %in% random_bonus, UL + 1, UL)
)
club_data %>%
group_by(Group) %>%
summarise(
P = mean(Pass),
E = mean(Europa),
UL = mean(UL),
) %>%
mutate(s = E + P + UL) %>%
arrange(desc(s))
library(tidyverse)
club_data <- read.csv("data/data1.csv") %>%
select(Club, Country, Elo, Level) %>%
filter(Level == 1 | Level == 0) %>%
mutate(Group = Country) %>%
select(-Country, -Level) %>%
group_by(Group) %>%
mutate(count = n()) %>%
filter(count > 4) %>%
ungroup() %>%
select(-count)
rest <- read.csv("data/data1.csv") %>%
select(Club, Country, Elo, Level) %>%
filter(Level == 1 | Level == 0) %>%
mutate(Group = Country) %>%
select(-Country, -Level) %>%
group_by(Group) %>%
mutate(count = n()) %>%
filter(count <= 4) %>%
ungroup() %>%
select(-count) %>%
filter( Elo > 1200) %>%
sample_n(., size = 20, replace = FALSE) %>%
mutate(Group = "REST")
club_data <- club_data %>%
full_join(rest)
# Pass ------------------------------
# Define the groups and their Pass values
g_4 <-  c("ENG", "GER", "ESP", "ITA")
g_3 <- "FRA"
g_2 <- c("POR","NED","BEL")
# Find the groups that haven't gotten any values
remaining_groups_pass <- setdiff(unique(club_data$Group), c(g_4, g_3, g_2))
# Randomly select 7 groups from them for Pass
random_groups_pass <- sample(remaining_groups_pass, size = 7)
# Update the Pass values in club_data
club_data <- club_data %>%
mutate(Pass = case_when(
Group %in% g_4 ~ 4,
Group == g_3 ~ 3,
Group %in% g_2 ~ 2,
Group %in% random_groups_pass ~ 1,  # assign 1 to the randomly selected groups
TRUE ~ 0
))
# Europa league ------------------------------
eg_2 <-  c("ENG", "GER", "ESP", "ITA", "FRA")
eg_1 <- c("POR", "NED", "BEL", "RUS", "CZE", "TUR",
"GRE", "AUT", "NOR")
# Find the groups that haven't gotten any values
remaining_groups_europa <- setdiff(unique(club_data$Group), c(eg_2, eg_1))
# Randomly select 5 groups from them for Europa (excluding the ones already in random_groups_pass)
random_groups_europa <- sample(setdiff(remaining_groups_europa, random_groups_pass), size = 5)
# Combine the random groups from Pass with the new random groups for Europa
combined_random_groups <- union(random_groups_pass, random_groups_europa)
# Update the Europa values in club_data
club_data <- club_data %>%
mutate(Europa = case_when(
Group %in% eg_2 ~ 2,
Group %in% eg_1 ~ 1,
Group %in% combined_random_groups ~ 1,  # assign 1 to the combined random groups
TRUE ~ 0
))
# Summarize to calculate the initial sum of Europa values
additional_teams_needed <- club_data %>%
group_by(Group) %>%
summarise(E = mean(Europa)) %>%
summarise(
initial_sum_europa = sum(E),
additional_teams_needed = 32 - initial_sum_europa
) %>%
pull(additional_teams_needed)
# Combine eg_2 and eg_1 and randomly select the necessary number of unique teams from them
all_groups <- c(eg_2, eg_1)
selected_teams <- sample(all_groups, size = additional_teams_needed,
replace = FALSE)
# Update the Europa value for the selected teams
club_data <- club_data %>%
mutate(Europa =
ifelse(Group %in% selected_teams, Europa + 1, Europa)
)
# UL ------------------------------
# Max 7 teams per group
groups_to_remove <- club_data %>%
group_by(Group) %>%
summarise(mean_Europa = mean(Europa),
mean_Pass = mean(Pass)) %>%
filter(mean_Europa + mean_Pass == 7) %>%
pull(Group)
ulg_1 <- unique(club_data$Group)
ulg_1 <- setdiff(ulg_1, groups_to_remove)
possible_bonus <- c(
"NED", "POR", "BEL", "TUR", "CZE",
"GRE", "SCO", "RUS", "DEN", "NOR", "SRB", "AUT", "ROM", "ISR", "POL",
"UKR", "CRO", "SUI", "SWE", "HUN", "BUL", "SVN", "REST"
)
# Extra teams to join the Conference league
random_bonus <- sample(possible_bonus, size = 32 - length(ulg_1), replace = FALSE)
club_data <- club_data %>%
mutate(UL = case_when(
Group %in% ulg_1 ~ 1,
TRUE ~ 0
))
club_data <- club_data %>%
mutate(UL =
ifelse(Group %in% random_bonus, UL + 1, UL)
)
club_data %>%
group_by(Group) %>%
summarise(
P = mean(Pass),
E = mean(Europa),
UL = mean(UL),
) %>%
mutate(s = E + P + UL) %>%
arrange(desc(s))
library(tidyverse)
club_data <- read.csv("data/data1.csv") %>%
select(Club, Country, Elo, Level) %>%
filter(Level == 1 | Level == 0) %>%
mutate(Group = Country) %>%
select(-Country, -Level) %>%
group_by(Group) %>%
mutate(count = n()) %>%
filter(count > 4) %>%
ungroup() %>%
select(-count)
rest <- read.csv("data/data1.csv") %>%
select(Club, Country, Elo, Level) %>%
filter(Level == 1 | Level == 0) %>%
mutate(Group = Country) %>%
select(-Country, -Level) %>%
group_by(Group) %>%
mutate(count = n()) %>%
filter(count <= 4) %>%
ungroup() %>%
select(-count) %>%
filter( Elo > 1200) %>%
sample_n(., size = 20, replace = FALSE) %>%
mutate(Group = "REST")
club_data <- club_data %>%
full_join(rest)
# Pass ------------------------------
# Define the groups and their Pass values
g_4 <-  c("ENG", "GER", "ESP", "ITA")
g_3 <- "FRA"
g_2 <- c("POR","NED","BEL")
# Find the groups that haven't gotten any values
remaining_groups_pass <- setdiff(unique(club_data$Group), c(g_4, g_3, g_2))
# Randomly select 7 groups from them for Pass
random_groups_pass <- sample(remaining_groups_pass, size = 7)
# Update the Pass values in club_data
club_data <- club_data %>%
mutate(Pass = case_when(
Group %in% g_4 ~ 4,
Group == g_3 ~ 3,
Group %in% g_2 ~ 2,
Group %in% random_groups_pass ~ 1,  # assign 1 to the randomly selected groups
TRUE ~ 0
))
# Europa league ------------------------------
eg_2 <-  c("ENG", "GER", "ESP", "ITA", "FRA")
eg_1 <- c("POR", "NED", "BEL", "RUS", "CZE", "TUR",
"GRE", "AUT", "NOR")
# Find the groups that haven't gotten any values
remaining_groups_europa <- setdiff(unique(club_data$Group), c(eg_2, eg_1))
# Randomly select 5 groups from them for Europa (excluding the ones already in random_groups_pass)
random_groups_europa <- sample(setdiff(remaining_groups_europa, random_groups_pass), size = 5)
# Combine the random groups from Pass with the new random groups for Europa
combined_random_groups <- union(random_groups_pass, random_groups_europa)
# Update the Europa values in club_data
club_data <- club_data %>%
mutate(Europa = case_when(
Group %in% eg_2 ~ 2,
Group %in% eg_1 ~ 1,
Group %in% combined_random_groups ~ 1,  # assign 1 to the combined random groups
TRUE ~ 0
))
# Summarize to calculate the initial sum of Europa values
additional_teams_needed <- club_data %>%
group_by(Group) %>%
summarise(E = mean(Europa)) %>%
summarise(
initial_sum_europa = sum(E),
additional_teams_needed = 32 - initial_sum_europa
) %>%
pull(additional_teams_needed)
# Combine eg_2 and eg_1 and randomly select the necessary number of unique teams from them
all_groups <- c(eg_2, eg_1)
selected_teams <- sample(all_groups, size = additional_teams_needed,
replace = FALSE)
# Update the Europa value for the selected teams
club_data <- club_data %>%
mutate(Europa =
ifelse(Group %in% selected_teams, Europa + 1, Europa)
)
# UL ------------------------------
# Max 7 teams per group
groups_to_remove <- club_data %>%
group_by(Group) %>%
summarise(mean_Europa = mean(Europa),
mean_Pass = mean(Pass)) %>%
filter(mean_Europa + mean_Pass == 7) %>%
pull(Group)
ulg_1 <- unique(club_data$Group)
ulg_1 <- setdiff(ulg_1, groups_to_remove)
possible_bonus <- c(
"NED", "POR", "BEL", "TUR", "CZE",
"GRE", "SCO", "RUS", "DEN", "NOR", "SRB", "AUT", "ROM", "ISR", "POL",
"UKR", "CRO", "SUI", "SWE", "HUN", "BUL", "SVN", "REST"
)
# Extra teams to join the Conference league
random_bonus <- sample(possible_bonus, size = 32 - length(ulg_1), replace = FALSE)
club_data <- club_data %>%
mutate(UL = case_when(
Group %in% ulg_1 ~ 1,
TRUE ~ 0
))
club_data <- club_data %>%
mutate(UL =
ifelse(Group %in% random_bonus, UL + 1, UL)
)
club_data %>%
group_by(Group) %>%
summarise(
P = mean(Pass),
E = mean(Europa),
UL = mean(UL),
) %>%
mutate(s = E + P + UL) %>%
arrange(desc(s)) %>%
print(n = 15)
library(tidyverse)
club_data <- read.csv("data/data1.csv") %>%
select(Club, Country, Elo, Level) %>%
filter(Level == 1 | Level == 0) %>%
mutate(Group = Country) %>%
select(-Country, -Level) %>%
group_by(Group) %>%
mutate(count = n()) %>%
filter(count > 4) %>%
ungroup() %>%
select(-count)
rest <- read.csv("data/data1.csv") %>%
select(Club, Country, Elo, Level) %>%
filter(Level == 1 | Level == 0) %>%
mutate(Group = Country) %>%
select(-Country, -Level) %>%
group_by(Group) %>%
mutate(count = n()) %>%
filter(count <= 4) %>%
ungroup() %>%
select(-count) %>%
filter( Elo > 1200) %>%
sample_n(., size = 20, replace = FALSE) %>%
mutate(Group = "REST")
club_data <- club_data %>%
full_join(rest)
# Pass ------------------------------
# Define the groups and their Pass values
g_4 <-  c("ENG", "GER", "ESP", "ITA")
g_3 <- "FRA"
g_2 <- c("POR","NED","BEL")
# Find the groups that haven't gotten any values
remaining_groups_pass <- setdiff(unique(club_data$Group), c(g_4, g_3, g_2))
# Randomly select 7 groups from them for Pass
random_groups_pass <- sample(remaining_groups_pass, size = 7)
# Update the Pass values in club_data
club_data <- club_data %>%
mutate(Pass = case_when(
Group %in% g_4 ~ 4,
Group == g_3 ~ 3,
Group %in% g_2 ~ 2,
Group %in% random_groups_pass ~ 1,  # assign 1 to the randomly selected groups
TRUE ~ 0
))
# Europa league ------------------------------
eg_2 <-  c("ENG", "GER", "ESP", "ITA", "FRA")
eg_1 <- c("POR", "NED", "BEL", "RUS", "CZE", "TUR",
"GRE", "AUT", "NOR")
# Find the groups that haven't gotten any values
remaining_groups_europa <- setdiff(unique(club_data$Group), c(eg_2, eg_1))
# Randomly select 5 groups from them for Europa (excluding the ones already in random_groups_pass)
random_groups_europa <- sample(setdiff(remaining_groups_europa, random_groups_pass), size = 5)
# Combine the random groups from Pass with the new random groups for Europa
combined_random_groups <- union(random_groups_pass, random_groups_europa)
# Update the Europa values in club_data
club_data <- club_data %>%
mutate(Europa = case_when(
Group %in% eg_2 ~ 2,
Group %in% eg_1 ~ 1,
Group %in% combined_random_groups ~ 1,  # assign 1 to the combined random groups
TRUE ~ 0
))
# Summarize to calculate the initial sum of Europa values
additional_teams_needed <- club_data %>%
group_by(Group) %>%
summarise(E = mean(Europa)) %>%
summarise(
initial_sum_europa = sum(E),
additional_teams_needed = 32 - initial_sum_europa
) %>%
pull(additional_teams_needed)
# Combine eg_2 and eg_1 and randomly select the necessary number of unique teams from them
all_groups <- c(eg_2, eg_1)
selected_teams <- sample(all_groups, size = additional_teams_needed,
replace = FALSE)
# Update the Europa value for the selected teams
club_data <- club_data %>%
mutate(Europa =
ifelse(Group %in% selected_teams, Europa + 1, Europa)
)
# UL ------------------------------
# Max 7 teams per group
groups_to_remove <- club_data %>%
group_by(Group) %>%
summarise(mean_Europa = mean(Europa),
mean_Pass = mean(Pass)) %>%
filter(mean_Europa + mean_Pass == 7) %>%
pull(Group)
ulg_1 <- unique(club_data$Group)
ulg_1 <- setdiff(ulg_1, groups_to_remove)
possible_bonus <- c(
"NED", "POR", "BEL", "TUR", "CZE",
"GRE", "SCO", "RUS", "DEN", "NOR", "SRB", "AUT", "ROM", "ISR", "POL",
"UKR", "CRO", "SUI", "SWE", "HUN", "BUL", "SVN", "REST"
)
# Extra teams to join the Conference league
random_bonus <- sample(possible_bonus, size = 32 - length(ulg_1), replace = FALSE)
club_data <- club_data %>%
mutate(UL = case_when(
Group %in% ulg_1 ~ 1,
TRUE ~ 0
))
club_data <- club_data %>%
mutate(UL =
ifelse(Group %in% random_bonus, UL + 1, UL)
)
club_data %>%
group_by(Group) %>%
summarise(
P = mean(Pass),
E = mean(Europa),
UL = mean(UL),
) %>%
mutate(s = E + P + UL) %>%
arrange(desc(s)) %>%
print(n = 15)
5*2 + 9 + 12
